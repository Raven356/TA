#include <iostream>
#include <ctime>
#include <Windows.h>
#include <conio.h>

using namespace std;

struct BstNode{
    int data;
    BstNode* left;
    BstNode* right;
};

BstNode* GetNewNode(int data)
{
    BstNode* newNode = new BstNode();
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

BstNode* Insert(BstNode* root, int data)
{
    if (root == NULL) {
        root = GetNewNode(data);
    }
    else if (data <= root->data)
    {
        root->left = Insert(root->left, data);
    }
    else
    {
        root->right = Insert(root->right, data);
    }
    return root;
}

bool Search(BstNode* root, int data)
{
    if (root != NULL)
    {
        cout << root->data << endl;
    }
    if (root == NULL) return false;
    else if (root->data == data) return true;
    else if (data <= root->data) return Search(root->left, data);
    else return Search(root->right, data);
}

void Clean(BstNode* tree)
{
    if (tree != NULL)
    {
        Clean(tree->left);
        Clean(tree->right);
        delete tree;
    }
}

int main()
{
    BstNode* root;
    srand(time(0));
    double start, stop;
    do
    {
        system("cls");
        cout << "Enter amount of caves: ";
        int am_of_caves;
        cin >> am_of_caves;
        system("cls");
        cout << "Enter price of tresuare: ";
        int price_of_gold;
        cin >> price_of_gold;
        system("cls");
        root = NULL;
        for (int i{}; i < am_of_caves; i++)
        {
            int temp = rand() % price_of_gold + 1;
            root = Insert(root, temp);
        }
        start = clock();
        if (Search(root, price_of_gold))
        {
            stop = clock();
            cout << "Without adding additional cave\nFound!\n";
            cout << "Time for succesful: " << (stop - start) / 1e20;
        }
        else
        {
            system("cls");
            cout << "Adding additional cave with treasure\n";
            root = Insert(root, price_of_gold);
            Search(root, price_of_gold);
            stop = clock();
            cout << "Found!\n";
            cout << "Time for unsuccesful: " << (stop - start) / 1e20;
        }
        Clean(root);
    } while (_getch() != 27);
}
