#include <iostream>
#include<ctype.h>
#include <stdlib.h>
#include <conio.h>
#include <ctime>
#include <Windows.h>

using namespace std;

struct node
{
	int element;
	node* left;
	node* right;
	int height;
};

typedef struct node* nodeptr;
int count_x;

class bstree
{
public:
	void insert(int, nodeptr&);
	void del(int, nodeptr&);
	int deletemin(nodeptr&);
	bool find(int, nodeptr&);
	nodeptr findmin(nodeptr);
	nodeptr findmax(nodeptr);
	void makeempty(nodeptr&);
	void copy(nodeptr&, nodeptr&);
	nodeptr nodecopy(nodeptr&);
	void preorder(nodeptr);
	void inorder(nodeptr);
	void postorder(nodeptr);
	int bsheight(nodeptr);
	nodeptr srl(nodeptr&);
	nodeptr drl(nodeptr&);
	nodeptr srr(nodeptr&);
	nodeptr drr(nodeptr&);
	int max_1(int, int);
	int nonodes(nodeptr);
};
// Inserting a node
void bstree::insert(int x, nodeptr& p)
{
	if (p == NULL)
	{
		p = new node;
		p->element = x;
		p->left = NULL;
		p->right = NULL;
		p->height = 0;
		if (p == NULL)
		{
			cout << "Out of Space\n" << endl;
		}
	}
	else
	{
		if (x < p->element)
		{
			insert(x, p->left);
			if ((bsheight(p->left) - bsheight(p->right)) == 2)
			{
				if (x < p->left->element)
				{
					p = srl(p);
				}
				else
				{
					p = drl(p);
				}
			}
		}
		else if (x > p->element)
		{
			insert(x, p->right);
			if ((bsheight(p->right) - bsheight(p->left)) == 2)
			{
				if (x > p->right->element)
				{
					p = srr(p);
				}
				else
				{
					p = drr(p);
				}
			}
		}
		else
		{
			count_x--;
		}
	}
	int m, n, d;
	m = bsheight(p->left);
	n = bsheight(p->right);
	d = max_1(m, n);
	p->height = d + 1;
}
// Finding the Smallest
nodeptr bstree::findmin(nodeptr p)
{
	if (p == NULL)
	{
		cout << "No elements\n" << endl;
		return p;
	}
	else
	{
		while (p->left != NULL)
		{
			p = p->left;
			//return p;
		}
		return p;
	}
}
// Finding the Largest node
nodeptr bstree::findmax(nodeptr p)
{
	if (p == NULL)
	{
		cout << "No elements\n" << endl;
		return p;
	}
	else
	{
		while (p->right != NULL)
		{
			p = p->right;
			//return p;
		}
		return p;
	}
}
// Finding an element
bool bstree::find(int x, nodeptr& p)
{
	if (p == NULL)
	{
		return false;
	}
	else
	{
		if (x < p->element)
		{
			cout << p->element << endl;
			find(x, p->left);
		}
		else
		{
			if (x > p->element)
			{
				cout << p->element << endl;
				find(x, p->right);
			}
			else
			{
				cout << p->element << endl;
				return true;
			}
		}
	}
}
// Copy a tree
void bstree::copy(nodeptr& p, nodeptr& p1)
{
	makeempty(p1);
	p1 = nodecopy(p);
}
// Make a tree empty
void bstree::makeempty(nodeptr& p)
{
	nodeptr d;
	if (p != NULL)
	{
		makeempty(p->left);
		makeempty(p->right);
		d = p;
		free(d);
		p = NULL;
	}
}
// Copy the nodes
nodeptr bstree::nodecopy(nodeptr& p)
{
	nodeptr temp;
	if (p == NULL)
	{
		return p;
	}
	else
	{
		temp = new node;
		temp->element = p->element;
		temp->left = nodecopy(p->left);
		temp->right = nodecopy(p->right);
		return temp;
	}
}

// Deleting a node
void bstree::del(int x, nodeptr& p)
{
	nodeptr d;
	if (p == NULL)
	{
		cout << "No element\n" << endl;
	}
	else if (x < p->element)
	{
		del(x, p->left);
	}
	else if (x > p->element)
	{
		del(x, p->right);
	}
	else if ((p->left == NULL) && (p->right == NULL))
	{
		d = p;
		free(d);
		p = NULL;
		cout << "Deleted\n" << endl;
	}
	else if (p->left == NULL)
	{
		d = p;
		free(d);
		p = p->right;
		cout << "Deleted\n" << endl;
	}
	else if (p->right == NULL)
	{
		d = p;
		p = p->left;
		free(d);
		cout << "Deleted\n" << endl;
	}
	else
	{
		p->element = deletemin(p->right);
	}
}

int bstree::deletemin(nodeptr& p)
{
	int c;
	if (p->left == NULL)
	{
		c = p->element;
		p = p->right;
		return c;
	}
	else
	{
		c = deletemin(p->left);
		return c;
	}
}
void bstree::preorder(nodeptr p)
{
	if (p != NULL)
	{
		cout << p->element << "\t";
		preorder(p->left);
		preorder(p->right);
	}
}

// Inorder Printing
void bstree::inorder(nodeptr p)
{
	if (p != NULL)
	{
		inorder(p->left);
		cout << p->element << "\t";
		inorder(p->right);
	}
}

// PostOrder Printing
void bstree::postorder(nodeptr p)
{
	if (p != NULL)
	{
		postorder(p->left);
		postorder(p->right);
		cout << p->element << "\t";
	}
}

int bstree::max_1(int value1, int value2)
{
	return ((value1 > value2) ? value1 : value2);
}
int bstree::bsheight(nodeptr p)
{
	int t;
	if (p == NULL)
	{
		return -1;
	}
	else
	{
		t = p->height;
		return t;
	}
}

nodeptr bstree::srl(nodeptr& p1)
{
	nodeptr p2;
	p2 = p1->left;
	p1->left = p2->right;
	p2->right = p1;
	p1->height = max_1(bsheight(p1->left), bsheight(p1->right)) + 1;
	p2->height = max_1(bsheight(p2->left), p1->height) + 1;
	return p2;
}
nodeptr bstree::srr(nodeptr& p1)
{
	nodeptr p2;
	p2 = p1->right;
	p1->right = p2->left;
	p2->left = p1;
	p1->height = max_1(bsheight(p1->left), bsheight(p1->right)) + 1;
	p2->height = max_1(p1->height, bsheight(p2->right)) + 1;
	return p2;
}
nodeptr bstree::drl(nodeptr& p1)
{
	p1->left = srr(p1->left);
	return srl(p1);
}
nodeptr bstree::drr(nodeptr& p1)
{
	p1->right = srl(p1->right);
	return srr(p1);
}

int bstree::nonodes(nodeptr p)
{
	int count = 0;
	if (p != NULL)
	{
		nonodes(p->left);
		nonodes(p->right);
		count++;
	}
	return count;
}

int main()
{
	//clrscr();

	nodeptr root, root1, min, max;//,flag;
	int a, choice, findele, delele;
	char ch = 'y';
	bstree bst;
	double start, stop;

	//system("clear");
	root = NULL;
	root1 = NULL;
	int amount_of_caves;
	cout << "Enter amount of caves: ";
	cin >> amount_of_caves;
	int temp;
	srand(time(0));
	cout << "Enter amount of treasure: ";
	int amount_of_gold;
	cin >> amount_of_gold;
	start = clock();
	for (count_x; count_x < amount_of_caves; count_x++)
	{
		int temp1 = count_x;
		temp = rand() % amount_of_gold + 1;
		bst.insert(temp, root);
		if (temp1 == count_x)
			cout << temp << endl;
	}
	stop = clock();
	cout << "\n\nTime for inserting = " << (stop - start) / 1e20 << endl << endl;
	int del;
	cout << "Enter what you want to delete: ";
	cin >> del;
	start = clock();
	bst.del(del, root);
	stop = clock();
	cout << "\n\nTime for deleting = " << (stop - start) / 1e20 << endl << endl;
	start = clock();
	if (bst.find(amount_of_gold, root))
	{
		stop = clock();
		cout << "Without adding additional cave\nFound!\n";
	}
	else
	{
		system("cls");
		cout << "Adding additional cave with treasure\n";
		bst.insert(amount_of_gold, root);
		bst.find(amount_of_gold, root);
		stop = clock();
		cout << "Found!\n";
	}
	cout << "\n\nTime for searching = " << (stop - start) / 1e20 << endl << endl;
}
