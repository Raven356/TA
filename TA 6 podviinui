#include <iostream>
#include <list>
#include <ctime>
#include <conio.h>

using namespace std;
// Hash table size
#define TABLE_SIZE 1300
// Used in second hash function.
#define PRIME 500
class DoubleHash {
	// Pointer to an array containing buckets
	int* hashTable;
	int curr_size;
public:
	// function to check if hash table is full
	bool isFull()
	{
		// if hash size reaches maximum size
		return (curr_size == TABLE_SIZE);
	} // function to calculate first hash
	int hash1(int key, int method = 0)
	{
		//if(method == 1)
			return (key % TABLE_SIZE);
		//return (TABLE_SIZE * fmod(0.6 * key, 1));
	}
	// function to calculate second hash
	int hash2(int key, int method = 0)
	{
		//if(method == 1)
			return (PRIME - (key % PRIME));
		//return (TABLE_SIZE * fmod(0.6 * key, 1));
	}
	DoubleHash()
	{
		hashTable = new int[TABLE_SIZE];
		curr_size = 0;
		for (int i = 0; i < TABLE_SIZE; i++)
			hashTable[i] = -1;
	}
	// function to insert key into hash table
	void insertHash(int key, int method = 0)
	{
		// if hash table is full
		if (isFull()) return;
		// get index from first hash
		int index = hash1(key, method);
		// if collision occurs
		if (hashTable[index] != -1) {
			// get index2 from second hash
			int index2 = hash2(key, method);
			int i = 1;
			while (1) {
				// get newIndex
				int newIndex;
				//if (method == 1)
					newIndex = (index + i * index2) % TABLE_SIZE;
				//else
					//newIndex = (TABLE_SIZE * fmod(0.6 * (index + i * index2), 1));
				// if no collision occurs, store
				// the key
				if (hashTable[newIndex] == -1) {
					hashTable[newIndex] = key;
					break;
				}
				i++;
			}
		}
		// if no collision occurs
		else hashTable[index] = key;
		curr_size++;
	}
	// function to search key in hash table
	void search(int key, int method = 0)
	{
		int index1 = hash1(key, method);
		int index2 = hash2(key, method);
		int i = 0;
		//if (method == 1)
		{
			while (hashTable[(index1 + i * index2) % TABLE_SIZE] != key) {
				if (hashTable[(index1 + i * index2) % TABLE_SIZE] == -1) {
					cout << key << " does not exist" << endl;
					return;
				}
				i++;
			}
		}
		/*else
		{
			int table = TABLE_SIZE * fmod(0.6 * (index1 + i * index2), 1);
			while (hashTable[table] != key) {
				if (hashTable[table] == -1) {
					cout << key << " does not exist" << endl;
					return;
				}
				i++;
			}
		}*/
		cout << key << " found" << endl;
	}
	// function to display the hash table
	void displayHash()
	{
		for (int i = 0; i < TABLE_SIZE; i++) {
			if (hashTable[i] != -1)
				cout << i << " --> " << hashTable[i] << endl;
			else
				cout << i << endl;
		}
	}
};
// Driver's code
int main()
{
	do
	{
		system("cls");
		double start, stop;
		int amount;
		cout << "Enter amount of elements for hashing: ";
		// array that contains keys to be mapped
		cin >> amount;
		srand(time(0));
		int* a = new int[amount];
		list<int> j;
		start = time(0);
		for (int i{}; i < amount; i++)
		{
			a[i] = rand();
			j.push_back(a[i]);
		}
		// inserting keys into hash table
		DoubleHash h;
		
		//cout << "1) / \n2) * \n";
		//int method;
		//cin >> method;
		for (int i = 0; i < amount; i++) {
			h.insertHash(a[i]);
		}
		stop = time(0);
		cout << "\nTime for inserting = " << (stop - start) / 1e-20 << endl;
		// searching some keys
		cout << "\n\nEnter how many elements you want to search:";
		cin >> amount;
		int i;
		start = time(0);
		for (int l = 0; l < amount; l++)
		{

			i = rand() % j.size() + 0;
			auto c = j.begin();
			for (int k{}; k < i; k++)
				c++;
			if (amount < 1000)
				cout << "\nElement for searching = " << *c << endl;
			h.search(*c);
			j.erase(c);
		}
		stop = time(0);
		h.search(36); // This key is present in hash table
		//h.search(100); // This key does not exist in hash table
		// display the hash Table
		cout << "\nTime for searching = " << (stop - start) / 1e-20 << endl << endl;
		if (amount < 1000)
		h.displayHash();
		delete[] a;
	} 	while (_getch() != 27);
	return 0;
}
